<#
.Synopsis
 	Joins a a PVS server to an existing PVS farm using the CWC library

.Parameter PVS_IsFirstServer
    Int, 1 if this is the 1st server to join the farm, 0 if not (CLM calls powershell -file which makes int into strings so 0,1 can not be passed as bools)
.Parameter PVS_DNSDomainName
    Path for PVS store
.Parameter PVS_PrimarySQLHostname
    Hostname of primary SQL database server
.Parameter PVS_PrimarySQLInstanceName
    Optional Name of primary SQL database server instance
.Parameter PVS_DatabaseName
	Name of PVS database to join
.Parameter PVS_SiteName
	Name of PVS site to join
.Parameter PVS_StoreName
	Name of PVS store to asign server to
.Paramenter PVS_StorePath
    Path of store to asign server to ... only required when PVS_IsFirstServer = true
.Parameter PVS_ServiceAccountName
	Account name PVS services will run under
.Parameter PVS_ServiceAccountNamePassword
    Password for account PVS services will run under
.Parameter PVS_StreamingIP
	IP address stream service should use/bind to
.Parameter PVS_MgmtIP
	IP address mgmt/soap service should use/bind to
.Parameter PVS_LicenseServer
    FQDN address of CTX license server to use
.Parameter answerFilePath
    Location to create answer file
#>
[CmdletBinding()]
    Param (
            [Parameter(Mandatory=$false)][int] $PVS_IsFirstServer = 1,
            [Parameter(Mandatory=$true)][string] $PVS_DNSDomainName,
            [Parameter(Mandatory=$true)][string] $PVS_PrimarySQLHostname,
            [Parameter(Mandatory=$false)][string] $PVS_PrimarySQLInstanceName,
            [Parameter(Mandatory=$true)][string] $PVS_SecondarySQLHostname,
            [Parameter(Mandatory=$false)][string] $PVS_SecondarySQLInstanceName,
            [Parameter(Mandatory=$false)][string] $PVS_DatabaseName = "CTX_PVS_DB",
            [Parameter(Mandatory=$false)][string] $PVS_SiteName = "PrimarySite",
            [Parameter(Mandatory=$true)][string] $PVS_StoreName,
            [Parameter(Mandatory=$false)][string] $PVS_StorePath,
            [Parameter(Mandatory=$true)][string] $PVS_ServiceAccountName,
            [Parameter(Mandatory=$true)][string] $PVS_ServiceAccountNamePassword,
            [Parameter(Mandatory=$false)][string] $PVS_StreamingIP,
            [Parameter(Mandatory=$false)][string] $PVS_MgmtIP,
            [Parameter(Mandatory=$true)][string] $PVS_LicenseServer,
            [Parameter(Mandatory=$false)][string] $PVS_AnswerFilePath = "$ENV:Temp\Citrix")


try {
    $databaseServer = "$PVS_PrimarySQLHostname.$PVS_DNSDomainName"
    $failoverDatabaseServer = "$PVS_SecondarySQLHostname.$PVS_DNSDomainName"
    $licenseServer = "$PVS_LicenseServer.$PVS_DNSDomainName"

    if (!$PVS_StreamingIP) {
        Write-Host "No streaming IP specified, obtaining PVS server IP Address ... using the first available IP" 
        #Find active IPv4 interface, exclude loopbacks
        $interfaces = Get-NetIPInterface -ConnectionState Connected -AddressFamily IPv4 | where {$_.InterfaceAlias -notmatch "loopback"}
        #Get current IP settings, if more than one take the first
        if ($interfaces.count -gt 1 ) {$interfaces = $interfaces[0]}
        $ipConfiguration = Get-NetIPConfiguration -InterfaceIndex $interfaces.InterfaceIndex
        $ipAddress = $ipConfiguration.IPV4Address
        $PVS_StreamingIP = $ipAddress.IPAddress
    }
    if (!$PVS_MgmtIP) {
        Write-Host "No management IP specified, obtaining PVS server IP Address ... using the first available IP" 
        #Find active IPv4 interface, exclude loopbacks
        $interfaces = Get-NetIPInterface -ConnectionState Connected -AddressFamily IPv4 | where {$_.InterfaceAlias -notmatch "loopback"}
        #Get current IP settings, if more than one take the first
        if ($interfaces.count -gt 1 ) {$interfaces = $interfaces[0]}
        $ipConfiguration = Get-NetIPConfiguration -InterfaceIndex $interfaces.InterfaceIndex
        $ipAddress = $ipConfiguration.IPV4Address
        $PVS_MgmtIP = $ipAddress.IPAddress
    }

    Write-Host "Joining localhost to $PVS_DatabaseName on $databaseServer"
    Write-Host "Streaming IP: $PVS_StreamingIP"
    Write-Host "Management IP: $PVS_MgmtIP"
    cwcPVS\Join-PVSFarm -storePath $PVS_StorePath -databaseServer $databaseServer -databaseInstance $PVS_PrimarySQLInstanceName `
                        -databaseName $PVS_DatabaseName -siteName $PVS_SiteName -storeName $PVS_StoreName `
                        -PVSServiceAccountName $PVS_ServiceAccountName -PVSServiceAccountPassword $PVS_ServiceAccountNamePassword `
                        -PVSStreamingIP $PVS_StreamingIP -PVSMgmtIP $PVS_MgmtIP -LicenseServer $licenseServer `
                        -firstServer $PVS_IsFirstServer -secondaryDatabaseServer $failoverDatabaseServer -secondaryInstanceName $PVS_SecondarySQLInstanceName -verbose
}
catch {
    $Error[0]
    exit 1
}